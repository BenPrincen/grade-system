// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: class_system.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_class_5fsystem_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_class_5fsystem_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_class_5fsystem_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_class_5fsystem_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_class_5fsystem_2eproto;
namespace class_system {
class Assignment;
class AssignmentDefaultTypeInternal;
extern AssignmentDefaultTypeInternal _Assignment_default_instance_;
class Class;
class ClassDefaultTypeInternal;
extern ClassDefaultTypeInternal _Class_default_instance_;
class Quarter;
class QuarterDefaultTypeInternal;
extern QuarterDefaultTypeInternal _Quarter_default_instance_;
class School;
class SchoolDefaultTypeInternal;
extern SchoolDefaultTypeInternal _School_default_instance_;
}  // namespace class_system
PROTOBUF_NAMESPACE_OPEN
template<> ::class_system::Assignment* Arena::CreateMaybeMessage<::class_system::Assignment>(Arena*);
template<> ::class_system::Class* Arena::CreateMaybeMessage<::class_system::Class>(Arena*);
template<> ::class_system::Quarter* Arena::CreateMaybeMessage<::class_system::Quarter>(Arena*);
template<> ::class_system::School* Arena::CreateMaybeMessage<::class_system::School>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace class_system {

// ===================================================================

class Assignment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:class_system.Assignment) */ {
 public:
  Assignment();
  virtual ~Assignment();

  Assignment(const Assignment& from);
  Assignment(Assignment&& from) noexcept
    : Assignment() {
    *this = ::std::move(from);
  }

  inline Assignment& operator=(const Assignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Assignment& operator=(Assignment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Assignment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Assignment* internal_default_instance() {
    return reinterpret_cast<const Assignment*>(
               &_Assignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Assignment& a, Assignment& b) {
    a.Swap(&b);
  }
  inline void Swap(Assignment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Assignment* New() const final {
    return CreateMaybeMessage<Assignment>(nullptr);
  }

  Assignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Assignment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Assignment& from);
  void MergeFrom(const Assignment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Assignment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "class_system.Assignment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_class_5fsystem_2eproto);
    return ::descriptor_table_class_5fsystem_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPointsFieldNumber = 2,
    kWeightFieldNumber = 3,
    kAwardedPointsFieldNumber = 4,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required int32 points = 2;
  bool has_points() const;
  private:
  bool _internal_has_points() const;
  public:
  void clear_points();
  ::PROTOBUF_NAMESPACE_ID::int32 points() const;
  void set_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_points() const;
  void _internal_set_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required float weight = 3;
  bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  void clear_weight();
  float weight() const;
  void set_weight(float value);
  private:
  float _internal_weight() const;
  void _internal_set_weight(float value);
  public:

  // optional int32 awarded_points = 4;
  bool has_awarded_points() const;
  private:
  bool _internal_has_awarded_points() const;
  public:
  void clear_awarded_points();
  ::PROTOBUF_NAMESPACE_ID::int32 awarded_points() const;
  void set_awarded_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_awarded_points() const;
  void _internal_set_awarded_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:class_system.Assignment)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 points_;
  float weight_;
  ::PROTOBUF_NAMESPACE_ID::int32 awarded_points_;
  friend struct ::TableStruct_class_5fsystem_2eproto;
};
// -------------------------------------------------------------------

class Class :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:class_system.Class) */ {
 public:
  Class();
  virtual ~Class();

  Class(const Class& from);
  Class(Class&& from) noexcept
    : Class() {
    *this = ::std::move(from);
  }

  inline Class& operator=(const Class& from) {
    CopyFrom(from);
    return *this;
  }
  inline Class& operator=(Class&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Class& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Class* internal_default_instance() {
    return reinterpret_cast<const Class*>(
               &_Class_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Class& a, Class& b) {
    a.Swap(&b);
  }
  inline void Swap(Class* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Class* New() const final {
    return CreateMaybeMessage<Class>(nullptr);
  }

  Class* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Class>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Class& from);
  void MergeFrom(const Class& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Class* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "class_system.Class";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_class_5fsystem_2eproto);
    return ::descriptor_table_class_5fsystem_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsPerCatFieldNumber = 3,
    kAssignmentsFieldNumber = 4,
    kCategoriesFieldNumber = 5,
    kNameFieldNumber = 1,
    kGpaFieldNumber = 2,
  };
  // repeated int32 points_per_cat = 3;
  int points_per_cat_size() const;
  private:
  int _internal_points_per_cat_size() const;
  public:
  void clear_points_per_cat();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_points_per_cat(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_points_per_cat() const;
  void _internal_add_points_per_cat(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_points_per_cat();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 points_per_cat(int index) const;
  void set_points_per_cat(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_points_per_cat(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      points_per_cat() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_points_per_cat();

  // repeated .class_system.Assignment assignments = 4;
  int assignments_size() const;
  private:
  int _internal_assignments_size() const;
  public:
  void clear_assignments();
  ::class_system::Assignment* mutable_assignments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::class_system::Assignment >*
      mutable_assignments();
  private:
  const ::class_system::Assignment& _internal_assignments(int index) const;
  ::class_system::Assignment* _internal_add_assignments();
  public:
  const ::class_system::Assignment& assignments(int index) const;
  ::class_system::Assignment* add_assignments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::class_system::Assignment >&
      assignments() const;

  // repeated float categories = 5;
  int categories_size() const;
  private:
  int _internal_categories_size() const;
  public:
  void clear_categories();
  private:
  float _internal_categories(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_categories() const;
  void _internal_add_categories(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_categories();
  public:
  float categories(int index) const;
  void set_categories(int index, float value);
  void add_categories(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      categories() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_categories();

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional float gpa = 2;
  bool has_gpa() const;
  private:
  bool _internal_has_gpa() const;
  public:
  void clear_gpa();
  float gpa() const;
  void set_gpa(float value);
  private:
  float _internal_gpa() const;
  void _internal_set_gpa(float value);
  public:

  // @@protoc_insertion_point(class_scope:class_system.Class)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > points_per_cat_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::class_system::Assignment > assignments_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > categories_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  float gpa_;
  friend struct ::TableStruct_class_5fsystem_2eproto;
};
// -------------------------------------------------------------------

class Quarter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:class_system.Quarter) */ {
 public:
  Quarter();
  virtual ~Quarter();

  Quarter(const Quarter& from);
  Quarter(Quarter&& from) noexcept
    : Quarter() {
    *this = ::std::move(from);
  }

  inline Quarter& operator=(const Quarter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quarter& operator=(Quarter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Quarter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Quarter* internal_default_instance() {
    return reinterpret_cast<const Quarter*>(
               &_Quarter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Quarter& a, Quarter& b) {
    a.Swap(&b);
  }
  inline void Swap(Quarter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Quarter* New() const final {
    return CreateMaybeMessage<Quarter>(nullptr);
  }

  Quarter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Quarter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Quarter& from);
  void MergeFrom(const Quarter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quarter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "class_system.Quarter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_class_5fsystem_2eproto);
    return ::descriptor_table_class_5fsystem_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassesFieldNumber = 3,
    kDateFieldNumber = 1,
    kGpaFieldNumber = 2,
  };
  // repeated .class_system.Class classes = 3;
  int classes_size() const;
  private:
  int _internal_classes_size() const;
  public:
  void clear_classes();
  ::class_system::Class* mutable_classes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::class_system::Class >*
      mutable_classes();
  private:
  const ::class_system::Class& _internal_classes(int index) const;
  ::class_system::Class* _internal_add_classes();
  public:
  const ::class_system::Class& classes(int index) const;
  ::class_system::Class* add_classes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::class_system::Class >&
      classes() const;

  // required string date = 1;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);
  private:
  const std::string& _internal_date() const;
  void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // optional float gpa = 2;
  bool has_gpa() const;
  private:
  bool _internal_has_gpa() const;
  public:
  void clear_gpa();
  float gpa() const;
  void set_gpa(float value);
  private:
  float _internal_gpa() const;
  void _internal_set_gpa(float value);
  public:

  // @@protoc_insertion_point(class_scope:class_system.Quarter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::class_system::Class > classes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  float gpa_;
  friend struct ::TableStruct_class_5fsystem_2eproto;
};
// -------------------------------------------------------------------

class School :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:class_system.School) */ {
 public:
  School();
  virtual ~School();

  School(const School& from);
  School(School&& from) noexcept
    : School() {
    *this = ::std::move(from);
  }

  inline School& operator=(const School& from) {
    CopyFrom(from);
    return *this;
  }
  inline School& operator=(School&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const School& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const School* internal_default_instance() {
    return reinterpret_cast<const School*>(
               &_School_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(School& a, School& b) {
    a.Swap(&b);
  }
  inline void Swap(School* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline School* New() const final {
    return CreateMaybeMessage<School>(nullptr);
  }

  School* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<School>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const School& from);
  void MergeFrom(const School& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(School* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "class_system.School";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_class_5fsystem_2eproto);
    return ::descriptor_table_class_5fsystem_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuartersFieldNumber = 3,
    kDateFieldNumber = 1,
    kGpaFieldNumber = 2,
  };
  // repeated .class_system.Quarter quarters = 3;
  int quarters_size() const;
  private:
  int _internal_quarters_size() const;
  public:
  void clear_quarters();
  ::class_system::Quarter* mutable_quarters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::class_system::Quarter >*
      mutable_quarters();
  private:
  const ::class_system::Quarter& _internal_quarters(int index) const;
  ::class_system::Quarter* _internal_add_quarters();
  public:
  const ::class_system::Quarter& quarters(int index) const;
  ::class_system::Quarter* add_quarters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::class_system::Quarter >&
      quarters() const;

  // optional string date = 1;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);
  private:
  const std::string& _internal_date() const;
  void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // optional float gpa = 2;
  bool has_gpa() const;
  private:
  bool _internal_has_gpa() const;
  public:
  void clear_gpa();
  float gpa() const;
  void set_gpa(float value);
  private:
  float _internal_gpa() const;
  void _internal_set_gpa(float value);
  public:

  // @@protoc_insertion_point(class_scope:class_system.School)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::class_system::Quarter > quarters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  float gpa_;
  friend struct ::TableStruct_class_5fsystem_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Assignment

// required string name = 1;
inline bool Assignment::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Assignment::has_name() const {
  return _internal_has_name();
}
inline void Assignment::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Assignment::name() const {
  // @@protoc_insertion_point(field_get:class_system.Assignment.name)
  return _internal_name();
}
inline void Assignment::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:class_system.Assignment.name)
}
inline std::string* Assignment::mutable_name() {
  // @@protoc_insertion_point(field_mutable:class_system.Assignment.name)
  return _internal_mutable_name();
}
inline const std::string& Assignment::_internal_name() const {
  return name_.GetNoArena();
}
inline void Assignment::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Assignment::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:class_system.Assignment.name)
}
inline void Assignment::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:class_system.Assignment.name)
}
inline void Assignment::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:class_system.Assignment.name)
}
inline std::string* Assignment::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Assignment::release_name() {
  // @@protoc_insertion_point(field_release:class_system.Assignment.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Assignment::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:class_system.Assignment.name)
}

// required int32 points = 2;
inline bool Assignment::_internal_has_points() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Assignment::has_points() const {
  return _internal_has_points();
}
inline void Assignment::clear_points() {
  points_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Assignment::_internal_points() const {
  return points_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Assignment::points() const {
  // @@protoc_insertion_point(field_get:class_system.Assignment.points)
  return _internal_points();
}
inline void Assignment::_internal_set_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  points_ = value;
}
inline void Assignment::set_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_points(value);
  // @@protoc_insertion_point(field_set:class_system.Assignment.points)
}

// required float weight = 3;
inline bool Assignment::_internal_has_weight() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Assignment::has_weight() const {
  return _internal_has_weight();
}
inline void Assignment::clear_weight() {
  weight_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Assignment::_internal_weight() const {
  return weight_;
}
inline float Assignment::weight() const {
  // @@protoc_insertion_point(field_get:class_system.Assignment.weight)
  return _internal_weight();
}
inline void Assignment::_internal_set_weight(float value) {
  _has_bits_[0] |= 0x00000004u;
  weight_ = value;
}
inline void Assignment::set_weight(float value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:class_system.Assignment.weight)
}

// optional int32 awarded_points = 4;
inline bool Assignment::_internal_has_awarded_points() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Assignment::has_awarded_points() const {
  return _internal_has_awarded_points();
}
inline void Assignment::clear_awarded_points() {
  awarded_points_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Assignment::_internal_awarded_points() const {
  return awarded_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Assignment::awarded_points() const {
  // @@protoc_insertion_point(field_get:class_system.Assignment.awarded_points)
  return _internal_awarded_points();
}
inline void Assignment::_internal_set_awarded_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  awarded_points_ = value;
}
inline void Assignment::set_awarded_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_awarded_points(value);
  // @@protoc_insertion_point(field_set:class_system.Assignment.awarded_points)
}

// -------------------------------------------------------------------

// Class

// required string name = 1;
inline bool Class::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Class::has_name() const {
  return _internal_has_name();
}
inline void Class::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Class::name() const {
  // @@protoc_insertion_point(field_get:class_system.Class.name)
  return _internal_name();
}
inline void Class::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:class_system.Class.name)
}
inline std::string* Class::mutable_name() {
  // @@protoc_insertion_point(field_mutable:class_system.Class.name)
  return _internal_mutable_name();
}
inline const std::string& Class::_internal_name() const {
  return name_.GetNoArena();
}
inline void Class::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Class::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:class_system.Class.name)
}
inline void Class::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:class_system.Class.name)
}
inline void Class::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:class_system.Class.name)
}
inline std::string* Class::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Class::release_name() {
  // @@protoc_insertion_point(field_release:class_system.Class.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Class::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:class_system.Class.name)
}

// optional float gpa = 2;
inline bool Class::_internal_has_gpa() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Class::has_gpa() const {
  return _internal_has_gpa();
}
inline void Class::clear_gpa() {
  gpa_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Class::_internal_gpa() const {
  return gpa_;
}
inline float Class::gpa() const {
  // @@protoc_insertion_point(field_get:class_system.Class.gpa)
  return _internal_gpa();
}
inline void Class::_internal_set_gpa(float value) {
  _has_bits_[0] |= 0x00000002u;
  gpa_ = value;
}
inline void Class::set_gpa(float value) {
  _internal_set_gpa(value);
  // @@protoc_insertion_point(field_set:class_system.Class.gpa)
}

// repeated int32 points_per_cat = 3;
inline int Class::_internal_points_per_cat_size() const {
  return points_per_cat_.size();
}
inline int Class::points_per_cat_size() const {
  return _internal_points_per_cat_size();
}
inline void Class::clear_points_per_cat() {
  points_per_cat_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Class::_internal_points_per_cat(int index) const {
  return points_per_cat_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Class::points_per_cat(int index) const {
  // @@protoc_insertion_point(field_get:class_system.Class.points_per_cat)
  return _internal_points_per_cat(index);
}
inline void Class::set_points_per_cat(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  points_per_cat_.Set(index, value);
  // @@protoc_insertion_point(field_set:class_system.Class.points_per_cat)
}
inline void Class::_internal_add_points_per_cat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  points_per_cat_.Add(value);
}
inline void Class::add_points_per_cat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_points_per_cat(value);
  // @@protoc_insertion_point(field_add:class_system.Class.points_per_cat)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Class::_internal_points_per_cat() const {
  return points_per_cat_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Class::points_per_cat() const {
  // @@protoc_insertion_point(field_list:class_system.Class.points_per_cat)
  return _internal_points_per_cat();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Class::_internal_mutable_points_per_cat() {
  return &points_per_cat_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Class::mutable_points_per_cat() {
  // @@protoc_insertion_point(field_mutable_list:class_system.Class.points_per_cat)
  return _internal_mutable_points_per_cat();
}

// repeated .class_system.Assignment assignments = 4;
inline int Class::_internal_assignments_size() const {
  return assignments_.size();
}
inline int Class::assignments_size() const {
  return _internal_assignments_size();
}
inline void Class::clear_assignments() {
  assignments_.Clear();
}
inline ::class_system::Assignment* Class::mutable_assignments(int index) {
  // @@protoc_insertion_point(field_mutable:class_system.Class.assignments)
  return assignments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::class_system::Assignment >*
Class::mutable_assignments() {
  // @@protoc_insertion_point(field_mutable_list:class_system.Class.assignments)
  return &assignments_;
}
inline const ::class_system::Assignment& Class::_internal_assignments(int index) const {
  return assignments_.Get(index);
}
inline const ::class_system::Assignment& Class::assignments(int index) const {
  // @@protoc_insertion_point(field_get:class_system.Class.assignments)
  return _internal_assignments(index);
}
inline ::class_system::Assignment* Class::_internal_add_assignments() {
  return assignments_.Add();
}
inline ::class_system::Assignment* Class::add_assignments() {
  // @@protoc_insertion_point(field_add:class_system.Class.assignments)
  return _internal_add_assignments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::class_system::Assignment >&
Class::assignments() const {
  // @@protoc_insertion_point(field_list:class_system.Class.assignments)
  return assignments_;
}

// repeated float categories = 5;
inline int Class::_internal_categories_size() const {
  return categories_.size();
}
inline int Class::categories_size() const {
  return _internal_categories_size();
}
inline void Class::clear_categories() {
  categories_.Clear();
}
inline float Class::_internal_categories(int index) const {
  return categories_.Get(index);
}
inline float Class::categories(int index) const {
  // @@protoc_insertion_point(field_get:class_system.Class.categories)
  return _internal_categories(index);
}
inline void Class::set_categories(int index, float value) {
  categories_.Set(index, value);
  // @@protoc_insertion_point(field_set:class_system.Class.categories)
}
inline void Class::_internal_add_categories(float value) {
  categories_.Add(value);
}
inline void Class::add_categories(float value) {
  _internal_add_categories(value);
  // @@protoc_insertion_point(field_add:class_system.Class.categories)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Class::_internal_categories() const {
  return categories_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Class::categories() const {
  // @@protoc_insertion_point(field_list:class_system.Class.categories)
  return _internal_categories();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Class::_internal_mutable_categories() {
  return &categories_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Class::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:class_system.Class.categories)
  return _internal_mutable_categories();
}

// -------------------------------------------------------------------

// Quarter

// required string date = 1;
inline bool Quarter::_internal_has_date() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Quarter::has_date() const {
  return _internal_has_date();
}
inline void Quarter::clear_date() {
  date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Quarter::date() const {
  // @@protoc_insertion_point(field_get:class_system.Quarter.date)
  return _internal_date();
}
inline void Quarter::set_date(const std::string& value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:class_system.Quarter.date)
}
inline std::string* Quarter::mutable_date() {
  // @@protoc_insertion_point(field_mutable:class_system.Quarter.date)
  return _internal_mutable_date();
}
inline const std::string& Quarter::_internal_date() const {
  return date_.GetNoArena();
}
inline void Quarter::_internal_set_date(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Quarter::set_date(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:class_system.Quarter.date)
}
inline void Quarter::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:class_system.Quarter.date)
}
inline void Quarter::set_date(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:class_system.Quarter.date)
}
inline std::string* Quarter::_internal_mutable_date() {
  _has_bits_[0] |= 0x00000001u;
  return date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Quarter::release_date() {
  // @@protoc_insertion_point(field_release:class_system.Quarter.date)
  if (!_internal_has_date()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return date_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Quarter::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:class_system.Quarter.date)
}

// optional float gpa = 2;
inline bool Quarter::_internal_has_gpa() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Quarter::has_gpa() const {
  return _internal_has_gpa();
}
inline void Quarter::clear_gpa() {
  gpa_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Quarter::_internal_gpa() const {
  return gpa_;
}
inline float Quarter::gpa() const {
  // @@protoc_insertion_point(field_get:class_system.Quarter.gpa)
  return _internal_gpa();
}
inline void Quarter::_internal_set_gpa(float value) {
  _has_bits_[0] |= 0x00000002u;
  gpa_ = value;
}
inline void Quarter::set_gpa(float value) {
  _internal_set_gpa(value);
  // @@protoc_insertion_point(field_set:class_system.Quarter.gpa)
}

// repeated .class_system.Class classes = 3;
inline int Quarter::_internal_classes_size() const {
  return classes_.size();
}
inline int Quarter::classes_size() const {
  return _internal_classes_size();
}
inline void Quarter::clear_classes() {
  classes_.Clear();
}
inline ::class_system::Class* Quarter::mutable_classes(int index) {
  // @@protoc_insertion_point(field_mutable:class_system.Quarter.classes)
  return classes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::class_system::Class >*
Quarter::mutable_classes() {
  // @@protoc_insertion_point(field_mutable_list:class_system.Quarter.classes)
  return &classes_;
}
inline const ::class_system::Class& Quarter::_internal_classes(int index) const {
  return classes_.Get(index);
}
inline const ::class_system::Class& Quarter::classes(int index) const {
  // @@protoc_insertion_point(field_get:class_system.Quarter.classes)
  return _internal_classes(index);
}
inline ::class_system::Class* Quarter::_internal_add_classes() {
  return classes_.Add();
}
inline ::class_system::Class* Quarter::add_classes() {
  // @@protoc_insertion_point(field_add:class_system.Quarter.classes)
  return _internal_add_classes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::class_system::Class >&
Quarter::classes() const {
  // @@protoc_insertion_point(field_list:class_system.Quarter.classes)
  return classes_;
}

// -------------------------------------------------------------------

// School

// optional string date = 1;
inline bool School::_internal_has_date() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool School::has_date() const {
  return _internal_has_date();
}
inline void School::clear_date() {
  date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& School::date() const {
  // @@protoc_insertion_point(field_get:class_system.School.date)
  return _internal_date();
}
inline void School::set_date(const std::string& value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:class_system.School.date)
}
inline std::string* School::mutable_date() {
  // @@protoc_insertion_point(field_mutable:class_system.School.date)
  return _internal_mutable_date();
}
inline const std::string& School::_internal_date() const {
  return date_.GetNoArena();
}
inline void School::_internal_set_date(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void School::set_date(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:class_system.School.date)
}
inline void School::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:class_system.School.date)
}
inline void School::set_date(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:class_system.School.date)
}
inline std::string* School::_internal_mutable_date() {
  _has_bits_[0] |= 0x00000001u;
  return date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* School::release_date() {
  // @@protoc_insertion_point(field_release:class_system.School.date)
  if (!_internal_has_date()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return date_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void School::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:class_system.School.date)
}

// optional float gpa = 2;
inline bool School::_internal_has_gpa() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool School::has_gpa() const {
  return _internal_has_gpa();
}
inline void School::clear_gpa() {
  gpa_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float School::_internal_gpa() const {
  return gpa_;
}
inline float School::gpa() const {
  // @@protoc_insertion_point(field_get:class_system.School.gpa)
  return _internal_gpa();
}
inline void School::_internal_set_gpa(float value) {
  _has_bits_[0] |= 0x00000002u;
  gpa_ = value;
}
inline void School::set_gpa(float value) {
  _internal_set_gpa(value);
  // @@protoc_insertion_point(field_set:class_system.School.gpa)
}

// repeated .class_system.Quarter quarters = 3;
inline int School::_internal_quarters_size() const {
  return quarters_.size();
}
inline int School::quarters_size() const {
  return _internal_quarters_size();
}
inline void School::clear_quarters() {
  quarters_.Clear();
}
inline ::class_system::Quarter* School::mutable_quarters(int index) {
  // @@protoc_insertion_point(field_mutable:class_system.School.quarters)
  return quarters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::class_system::Quarter >*
School::mutable_quarters() {
  // @@protoc_insertion_point(field_mutable_list:class_system.School.quarters)
  return &quarters_;
}
inline const ::class_system::Quarter& School::_internal_quarters(int index) const {
  return quarters_.Get(index);
}
inline const ::class_system::Quarter& School::quarters(int index) const {
  // @@protoc_insertion_point(field_get:class_system.School.quarters)
  return _internal_quarters(index);
}
inline ::class_system::Quarter* School::_internal_add_quarters() {
  return quarters_.Add();
}
inline ::class_system::Quarter* School::add_quarters() {
  // @@protoc_insertion_point(field_add:class_system.School.quarters)
  return _internal_add_quarters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::class_system::Quarter >&
School::quarters() const {
  // @@protoc_insertion_point(field_list:class_system.School.quarters)
  return quarters_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace class_system

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_class_5fsystem_2eproto
